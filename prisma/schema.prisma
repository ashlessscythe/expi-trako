generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  id              String          @id @default(cuid())
  locationCode    String          @unique
  name            String
  address         String?
  city            String?
  state           String?
  country         String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  requests        MustGoRequest[]
  users           User[]          // Relation to users at this site
}

model User {
  id                    String          @id @default(cuid())
  name                  String
  email                 String
  siteId               String?         // Optional for backward compatibility
  site                 Site?           @relation(fields: [siteId], references: [id])
  password              String
  role                  Role
  resetToken           String?         @unique
  resetTokenExpires    DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  mustGoRequests       MustGoRequest[] @relation("CreatedBy")
  requestLogs          RequestLog[]    @relation("PerformedBy")

  @@unique([email, siteId])  // Ensure email is unique within a site
  @@index([siteId])
}

model MustGoRequest {
  id              String          @id @default(cuid())
  shipmentNumber  String
  siteId          String?         // Optional to maintain backward compatibility
  site            Site?           @relation(fields: [siteId], references: [id])
  plant           String?
  authorizationNumber   String?   @default("")
  palletCount     Int
  status          RequestStatus   @default(PENDING)
  routeInfo       String?
  additionalNotes String?
  notes           String[]        @default([])
  createdBy       String        
  creator         User            @relation("CreatedBy", fields: [createdBy], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deleted         Boolean         @default(false)
  deletedAt       DateTime?
  trailers        RequestTrailer[]
  partDetails     PartDetail[]    // Link parts directly to request
  logs            RequestLog[]    @relation("RequestLogs") // Add opposite relation

  @@index([createdBy])
  @@index([siteId])
}

model Trailer {
  id              String          @id @default(cuid())
  trailerNumber   String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  requests        RequestTrailer[]
  partDetails     PartDetail[]    // Keep reference for querying parts by trailer
}

model RequestTrailer {
  id              String        @id @default(cuid())
  requestId       String
  request         MustGoRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  trailerId       String
  trailer         Trailer       @relation(fields: [trailerId], references: [id], onDelete: Cascade)
  status          ItemStatus    @default(PENDING)
  createdAt       DateTime      @default(now())
  isTransload     Boolean       @default(false)

  @@unique([requestId, trailerId])
  @@index([requestId])
  @@index([trailerId])
}

model PartDetail {
  id              String        @id @default(cuid())
  partNumber      String
  quantity        Int
  status          ItemStatus @default(PENDING)
  requestId       String        // Link to specific request
  request         MustGoRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  trailerId       String        // Link to specific trailer
  trailer         Trailer       @relation(fields: [trailerId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt

  @@unique([partNumber, requestId, trailerId]) // Allow same part in different requests/trailers
  @@index([requestId])
  @@index([trailerId])
}

model RequestLog {
  id              String        @id @default(cuid())
  mustGoRequestId String
  mustGoRequest   MustGoRequest @relation("RequestLogs", fields: [mustGoRequestId], references: [id])
  action          String        
  performedBy     String
  performer       User          @relation("PerformedBy", fields: [performedBy], references: [id])
  timestamp       DateTime      @default(now())

  @@index([mustGoRequestId])
  @@index([performedBy])
}

model SystemSetting {
  key   String @id
  value String
}

enum ItemStatus {
  PENDING      // The request is new and awaiting processing
  IN_PROGRESS  // The part is actively being expedited
  IN_TRANSIT   // Trailer or part is in transit
  COMPLETED    // The request has been fulfilled
  CANCELED     // The request was canceled
  ON_HOLD      // The request is temporarily paused
}

enum Role {
  ADMIN
  CUSTOMER_SERVICE
  WAREHOUSE
  REPORT_RUNNER
  PENDING
}

enum RequestStatus {
  PENDING
  REPORTING
  APPROVED
  REJECTED
  IN_PROGRESS
  LOADING
  IN_TRANSIT
  ARRIVED
  COMPLETED
  ON_HOLD
  CANCELLED
  FAILED
}
